name: PyInstaller Auto-Release

on:
  push:
    branches: [master]

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install uv
        run: |
          python -m pip install --upgrade pip
          pip install uv

      - name: Setup virtual environment (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          uv venv --seed
          call .venv\Scripts\activate
          uv sync
          pip install --upgrade pip pyinstaller

      - name: Setup virtual environment (Linux)
        if: runner.os == 'Linux'
        run: |
          uv venv --seed
          source .venv/bin/activate
          uv sync
          pip install --upgrade pip pyinstaller

      - name: Build with PyInstaller (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          call .venv\Scripts\activate
          python -m PyInstaller ^
            --noconsole ^
            --onedir ^
            --name "AutomationPanel-windows" ^
            --hidden-import=playwright_stealth ^
            --hidden-import=patchright ^
            --hidden-import=psutil ^
            --hidden-import=tkinter ^
            --hidden-import=customtkinter ^
            app.py

      - name: Build with PyInstaller (Linux)
        if: runner.os == 'Linux'
        run: |
          source .venv/bin/activate
          python -m PyInstaller \
            --noconsole \
            --onedir \
            --name "AutomationPanel-linux" \
            --hidden-import=playwright_stealth \
            --hidden-import=patchright \
            --hidden-import=psutil \
            --hidden-import=tkinter \
            --hidden-import=customtkinter \
            app.py

      - name: Create setup script (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          echo @echo off > dist\AutomationPanel-windows\setup_and_run.bat
          echo setlocal >> dist\AutomationPanel-windows\setup_and_run.bat
          echo rem ─ Activate venv if present ─────────────────────────────────── >> dist\AutomationPanel-windows\setup_and_run.bat
          echo if exist "%%~dp0.venv\Scripts\activate.bat" ( >> dist\AutomationPanel-windows\setup_and_run.bat
          echo     call "%%~dp0.venv\Scripts\activate.bat" >> dist\AutomationPanel-windows\setup_and_run.bat
          echo ) else ( >> dist\AutomationPanel-windows\setup_and_run.bat
          echo     echo WARNING: No venv in distribution—using system Python. >> dist\AutomationPanel-windows\setup_and_run.bat
          echo ) >> dist\AutomationPanel-windows\setup_and_run.bat
          echo. >> dist\AutomationPanel-windows\setup_and_run.bat
          echo rem ─ Ensure uv CLI is installed ───────────────────────────────── >> dist\AutomationPanel-windows\setup_and_run.bat
          echo pip show uv ^> nul 2^>^&1 ^|^| pip install uv >> dist\AutomationPanel-windows\setup_and_run.bat
          echo. >> dist\AutomationPanel-windows\setup_and_run.bat
          echo rem ─ Sync dependencies ──────────────────────────────────────────── >> dist\AutomationPanel-windows\setup_and_run.bat
          echo uv sync >> dist\AutomationPanel-windows\setup_and_run.bat
          echo if errorlevel 1 ( >> dist\AutomationPanel-windows\setup_and_run.bat
          echo     echo ERROR: uv sync failed. >> dist\AutomationPanel-windows\setup_and_run.bat
          echo     pause >> dist\AutomationPanel-windows\setup_and_run.bat
          echo     exit /b 1 >> dist\AutomationPanel-windows\setup_and_run.bat
          echo ) >> dist\AutomationPanel-windows\setup_and_run.bat
          echo. >> dist\AutomationPanel-windows\setup_and_run.bat
          echo rem ─ Install Playwright browsers ───────────────────────────────── >> dist\AutomationPanel-windows\setup_and_run.bat
          echo python -m playwright install --with-deps >> dist\AutomationPanel-windows\setup_and_run.bat
          echo if errorlevel 1 ( >> dist\AutomationPanel-windows\setup_and_run.bat
          echo     echo ERROR: Playwright install failed. >> dist\AutomationPanel-windows\setup_and_run.bat
          echo     pause >> dist\AutomationPanel-windows\setup_and_run.bat
          echo     exit /b 1 >> dist\AutomationPanel-windows\setup_and_run.bat
          echo ) >> dist\AutomationPanel-windows\setup_and_run.bat
          echo. >> dist\AutomationPanel-windows\setup_and_run.bat
          echo echo Setup complete! Launching the app... >> dist\AutomationPanel-windows\setup_and_run.bat
          echo start "" "%%~dp0AutomationPanel-windows.exe" >> dist\AutomationPanel-windows\setup_and_run.bat
          echo endlocal >> dist\AutomationPanel-windows\setup_and_run.bat

      - name: Create setup script (Linux)
        if: runner.os == 'Linux'
        run: |
          cat > dist/AutomationPanel-linux/setup_and_run.sh << 'EOF'
          #!/bin/bash
          # Activate venv if present
          if [ -f "$(dirname "$0")/.venv/bin/activate" ]; then
            source "$(dirname "$0")/.venv/bin/activate"
          else
            echo "WARNING: No venv in distribution—using system Python."
          fi

          # Ensure uv CLI is installed
          pip show uv &>/dev/null || pip install uv

          # Sync dependencies
          uv sync
          if [ $? -ne 0 ]; then
            echo "ERROR: uv sync failed."
            read -p "Press Enter to continue..."
            exit 1
          fi

          # Install Playwright browsers
          python -m playwright install --with-deps
          if [ $? -ne 0 ]; then
            echo "ERROR: Playwright install failed."
            read -p "Press Enter to continue..."
            exit 1
          fi

          echo "Setup complete! Launching the app..."
          "$(dirname "$0")/AutomationPanel-linux"
          EOF
          chmod +x dist/AutomationPanel-linux/setup_and_run.sh

      - name: Prepare artifacts
        shell: bash
        run: |
          mkdir upload
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            7z a -tzip upload/AutomationPanel-windows.zip ./dist/AutomationPanel-windows/*
          else
            tar -czvf upload/AutomationPanel-linux.tar.gz -C dist AutomationPanel-linux
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ runner.os }}
          path: upload/*
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: binaries-*
          path: release-assets
          merge-multiple: true

      - name: Set release name
        id: rel
        run: echo "name=build-$(date +'%Y%m%d-%H%M%S')" >> "$GITHUB_OUTPUT"

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.rel.outputs.name }}
          name: ${{ steps.rel.outputs.name }}
          prerelease: true
          files: release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
