name: Windows Build & Packaging

on:
  push:
    branches:
      - master

permissions:
  contents: write

jobs:
  build-windows:
    name: Build & Package on Windows
    runs-on: windows-latest

    steps:
      # 1) Checkout
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2) Install uv (pin to 0.7.2) and enable cache on uv.lock
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: '0.7.2'
          enable-cache: true
          cache-dependency-glob: 'uv.lock'

      # 3) Ensure virtual environment seeded with pip
      - name: Step 1: Create venv seeded with pip
        run: uv venv --seed

      # 4) Sync project dependencies into the venv
      - name: Step 3: Sync project deps
        run: uv sync

      # 5) Install build tools (pip & PyInstaller) into the venv
      - name: Step 4: Install pip & PyInstaller
        run: uv pip install --upgrade pip pyinstaller

      # 6) Clean previous dist/build/spec artifacts
      - name: Step 5: Clean old dist/build/spec
        shell: cmd
        run: |
          if exist dist\AutomationPanel-windows rmdir /S /Q dist\AutomationPanel-windows
          if exist build rmdir /S /Q build
          if exist AutomationPanel-windows.spec del AutomationPanel-windows.spec

      # 7) Run PyInstaller from within the venv
      - name: Step 6: Run PyInstaller (--onedir)
        shell: cmd
        run: uv run python -m PyInstaller ^
          --noconsole ^
          --onedir ^
          --name AutomationPanel-windows ^
          --hidden-import=playwright_stealth ^
          --hidden-import=patchright ^
          --hidden-import=psutil ^
          --hidden-import=tkinter ^
          --hidden-import=customtkinter ^
          app.py

      # 8) Upload the resulting dist folder as artifact
      - name: Upload dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: AutomationPanel-windows
          path: dist/AutomationPanel-windows
